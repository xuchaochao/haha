代码在/Users/xcc/Documents/Dev/code/apiTest/jmeterTest/jmeter-demo-master/目录中,已经push到codingnet上,以后只要把jmx文件放到这个目录中的某个文件夹然后push到git上就哦了.
对了,要设置成不要忽略target文件夹.


接口测试流程:
开发接口测试案例的整体方案：
第一步：我们要分析出测试需求，并拿到开发提供的接口说明文档；
第二步：从接口说明文档中整理出接口测试案例，里面要包括详细的入参和出参数据以及明确的格式和检查点。
第三步：和开发一起对接口测试案例进行评审。
第四步：结合开发库，准备接口测试案例中的入参数据和出参数据，并整理成csv格式的文件。
第五步：结合接口测试案例文档和csv格式的数据文档，做接口测试案例的自动化案例开发。


二、接口自动化适用场景：
目前设计的自动化接口测试案例有两个运行场景：
1. 测试前置、开发自测：一个新的自动化接口测试案例开发完成后，直接发给接口对应的开发，安排在开发本地环境执行，一旦开发确认完成接口开发，就开始执行接口测试案例，基本上可以实时拿到测试结果，方便开发快速做出判断。【开发本地运行的方式就是打开JMeter工具，导入JMX文件，开始执行可。】
2. 回归测试：开发本地测试通过后，或整个需求手工测试通过后，把自动化的接口测试案例做分类整理，挑选出需要纳入到回归测试中的案例，在持续集成环境重新准备测试数据，并把案例纳入到持续集成的job中来，这些用于回归的接口测试案例需要配置到持续集成平台自动运行。

服务器名称或者ip:
www.koudaiqiche.com
121.41.21.139

80端口和8080端口的区别:
80端口是为HTTP即超文本传输协议开放的，此为上网冲浪使用次数最多的协议，主要用于WWW传输信息的协议。可以通过HTTP地址（即常说的“网址”）加“:80”来访问网站，因为浏览网页服务默认的端口号都是80，因此只需输入网址即可，不用输入“:80”了。
8080端口同80端口，是被用于WWW代理服务的，可以实现网页浏览，经常在访问某个网站或使用代理服务器的时候，会加上“:8080”端口号。另外Apache Tomcat web server安装后，默认的服务端口就是8080。

jmeter中的覆盖和叠加:
对于"服务器名称或者ip,路径"而言,不同的组件定义了这个值之后会先后覆盖掉;
对于参数之类的,则会先后叠加.

逻辑控制器:
1.简单控制器:
外层控制器会怎样他就会怎样,没有任何的逻辑控制功能.
2.循环控制器:
Foreve表示一直循环下去;
循环控制器子节点的运行次数=线程组中设定的循环次数 x 循环控制器中设定的循环次数
3.仅一次控制器:
上层的循环控制器A循环5次,但是仅一次控制器A.B中的smpler只会执行一次,通常用于登录获取token.
4.ForEach控制器?
5.事务控制器:
计时用的?
6.If控制器:
控制器中判断的内容对时才会执行的;用到的"用户定义的变量"这个组件可以与"if控制器"同级,或在内部.
7.Switch控制器:
该控制器下设置多个请求,分别为"请求1,请求2".
当switch控制器中什么都不填写的时候,默认执行请求1;
数值:填写0也是执行"请求1";
名称:也可以填入"请求2"来执行"请求2"
8.吞吐量控制器:
Percent Executions：设置运行比例为50.0,上层中设置4次循环时,则该控制器下真正的次数为2次.
吞吐量:按理来说应该是按照吞吐量控制器里设定的次数的,但是实际效果还是按照了上层设定的次数.
9.随机控制器:
随机执行其下的所某个子结点,若上层指定此时为3此,随机控制器下面的请求为"请求1,请求2",那么就会要么执行请求1要么执行请求2.
10.随机顺序控制器:
随机执行其下的所有子结点

相应数据中的乱码问题:
去配置文件中改成utf-8然后去掉改行的注释就好了.

变量:
定义变量的地方：
用户定义的变量,前置或后置处理器,csv参数化的变量.

前置或后置:
后置处理器中的正则表达式提取<title>标签中的内容:
引用名称:name
正则表达式:<title>(.+?)</title>
在前置处理器中用${name}来引用

csv参数化的变量:
创建一个.txt文件,内容:
wd,徐望超
ie,UTF-8
引用:${wd}


args={
"mobile":15678907899
"cid":2d0b8348297601658576b919a1a55f7f	
"app_type":2}


Jmeter函数助手:
分别填写csv的路径和数值(0表示第一行开始),然后点击生成
${__CSVRead(/Users/xcc/Documents/Dev/jmeter/jmxSave/data.txt,0)}

通过"用户定义的变量"定义的变量，在JMeter启动时对这个测试计划都是可见的。如果同一个变量在多个"线程组的用户定义的变量"中被定义，那么只有最后一个定义会生效。
"前置或后置处理器,csv参数化的变量"可以被用来重新定义变量，这些重定义仅仅影响当前线程。

一、Jmeter重要组件：
1）配置元件---Config Element：
　　用于初始化默认值和变量，以便后续采样器使用。配置元件大其作用域的初始阶段处理，配置元件仅对其所在的测试树分支有效，如，在同一个作用域的任何采样器前。
2）前置处理器--- Pre Processors：
　　前置处理器会在采样器发出请求之前做一些特殊操作。如果前置处理器附着在某个采样器之下，那么它只会在该采样器运行之前执行。前置处理器通常用于在采样器发出请求前修改采样器的某些设置，或者更新某些变量的值（这些变量不在服务器响应中获取值）。
3) 计时器---Timer：
　　定时器会让作用域内的每一个采样器都在执行前等待一个固定时长，如果不设定这种延迟，JMeter可能会在短时间内产生大量访问请求，导致服务器被大量请求所淹没。如果为线程组添加了多个定时器，那么JMeter会将这些定时器的时长叠加起来，共同影响作用域范围内的采样器。定时器可以作为采样器或者逻辑控制器的子项，目的是只影响作用域内的采样器。
4) 采样器---sampler：
　　采样器告诉JMeter发送一个请求到指定服务器，并等待服务器的请求。采样器会按照其在测试树中的顺序去执行，还可以用逻辑控制器来改变采样器运行的重复次数。
5）后置处理器---Post Processors：
　　后置处理器会在采样器发出请求之后做一些特殊操作。如果后置处理器附着在某个采样器之下，那么它只会在该采样器运行之后执行。后置处理器通常被用来处理服务器的响应数据，特别是服务器响应中提取数据。
6）断言---Assertions：
　　用户可以使用断言来检查从服务器获得的响应内容。通过断言可以测试服务器返回的响应与测试人员的期望是否相符
7）监听器---Listener：
　　监听器提供了对JMeter在测试期间收集到的信息的访问方法。"图形结果"监听器会将系统响应时长绘制在一张图片之中。"查看结果树"监听器会展示采样器请求和响应的细节，还可以将测试数据导入到文件之中，以供后续分析。
8） 逻辑控制器---Controller：
　　逻辑控制器可以帮助用户控制JMeter的测试逻辑，特别是何时发送请求。逻辑控制器可以改变其子测试元件的请求执行顺序。

作用域问题:
1.采样器（sampler）：元件不和其它元件相互作用，因此不存在作用域的问题。
2.逻辑控制器（Logic Controller）：元件只对其子节点中的取样器 和 逻辑控制器作用。
3.除采样器 和 逻辑控制器 元件外，其他6类元件，如果是某个sampler的子节点，则该元件只对其父子节点起作用。
例如在某个samplerA下面有一个循环的逻辑控制器,那么这个控制器将作用到这个samplerA以及samplerA下面的samplerB,但是不会作用到samplerA上面的父级的sampler.
4.除采样器和逻辑控制器元件外的其他6类元件，如果其父节点不是sampler ，则其作用域是该元件父节点下的其他所有后代节点（包括子节点，子节点的子节点等）。
例如在线程组下面直接一个循环的逻辑控制器,这个控制器和sampler同级,那么sampler也会被作用到.
5.作用域的特殊：
用户自定义变量组件不管放在哪个位置，它定义的变量都会被整个线程所共享。


分布式测试:
调度机(master)和执行机(slave)之分.
找到jmeter.properties文件，修改
server_port=1888
server.rmi.localport=1888
执行机上开启jmeter-server.sh,调度机上开始远程启动就OK了.
注意的是调度机和执行机最好要分开,每台机器上的jmeter的插件要一样.
若用了csv参数文件那么要每台执行机上都拷贝,并且保证路径一样.


以登录为例子讲讲
BeanShell PreProcessor
BeanShell PostProcessor
BeanShell断言:

路径:/app2/login
返回数据:
{
    "result":0,
    "token":"574679FA8E389FAC3EEBBF2C7E90CAC0",
    "uid":3427
}
1.BeanShell PostProcessor:

代码:
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;
	String jsonContent=prev.getResponseDataAsString();
	JSONObject jsonObject = new JSONObject(jsonContent);
	String uid = jsonObject.get("uid").toString();
	String token = jsonObject.getString("token");
vars.put("uid", uid);
vars.put("token", token);

在反馈(需要token和uid)中,采用${uid}和${token}来取到前面的uid和token的值
2.BeanShell PreProcessor:
代码:
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;
	String jsonContent=prev.getResponseDataAsString();
	JSONObject jsonObject = new JSONObject(jsonContent);
	String uid = jsonObject.get("uid").toString();
	String token = jsonObject.getString("token");
vars.put("uid", uid);
vars.put("token", token);
也需要在反馈中指定${token}和${uid}.
注意,当使用PreProcessor时候要保证前面一个Sampler是否真的是你所想取到的那个sampler(两者之间插着一个dubug sampler都不行)

3.BeanShell断言:
142.5
156.9
14.4
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

	String jsonContent=prev.getResponseDataAsString();
	JSONObject jsonObject = new JSONObject(jsonContent);
	String uid = jsonObject.get("uid").toString();
	String token = jsonObject.getString("token");
	String uidExpect="3427";
	String tokenLength=token.length()+"";

	if(!uid.equals(uidExpect)){
	prev.setSuccessful(false);
	}else
	{
		vars.put("uid", uid);
	}
	
	if(!tokenLength.equals("32")){
	prev.setSuccessful(false);
	}else{
		vars.put("token", token);
		}



备份:
获取token
进入首页
进入洗车列表页面
点击洗车有有价进行支付
支付页面中选择余额支付
跳到待服务的订单详情页面(点击出示二维码不用再次请求的)
商家版中扫描二维码(从接口文档中找接口)
商家版中点击消费
用户版中点击订单页面,查看最上面一家是否就是刚才购买的商品
用户版中点击订单中的该笔订单进入订单详情页面,查看
点击评价进入评价页面
输入内容进行评价,查看是否回到了订单详情,是否是交易完成,评价内容是否准确
重新点击订单页面,查看该页面是否已经没有了刚才购买的商品了(用时间戳来?)
点击进入历史订单页面,查看历史订单页面是否有刚才评价完成的订单
点击进入该笔历史订单
点击删除该笔历史订单
重新获取历史订单页面,查看是否已经没有该笔订单了.


1.对于返回的json没有没有没有没有没有日期,token之类的不确定的元素的话:
那么可以采取"此次获取到的全部数据".equal("假设正确的全部数据")对比!
但是需要先将jmeter中的返回数据复制到eclipse中,这样可以产生\\效果,然后再复制回去.
例如:对于首页这个线程组中"未登录状态下的首页全部数据"这个sampler的断言.
2.对于返回的json中有有有有有有有有有有日期,token之类的不确定的元素的话:
如果有干扰因素的话那么就可以挑出来这些不一样的,然后重新组装成一个string,然后和期望string(这个期望string也是挑出了有变化的那些)进行对比.
下面是解说:
//假设result的值每次都不一样,那么就要把result挑出来.
		//所以要比较(此次得到的全部的数据raw-result和result的值)和real(假设正确的全部的数据-result和result的值)是否相等
		//然后再比较result的值是否相等
		
		String raw="{\"result\":7,\"errmsg\":\"\\u8d26\\u53f7\\u9519\\u8bef\\uff0c\\u60a8\\u8fd8\\u53ef\\u4ee5\\u5c1d\\u8bd52\\u6b21\\uff01\"}";
		 String real="{\"errmsg\":\"\\u8d26\\u53f7\\u9519\\u8bef\\uff0c\\u60a8\\u8fd8\\u53ef\\u4ee5\\u5c1d\\u8bd52\\u6b21\\uff01\"}";
		
		 JSONObject rawlaiObject = new JSONObject(raw);
		 //real部分也要转换一下到jsonobject不然的话后来对比String的时候是unicode
		 JSONObject reallaiObject = new JSONObject(real);
		 
		rawlaiObject.remove("result");
		String ripe=rawlaiObject.toString();
	           real=reallaiObject.toString();
		
	           if(real.equals(ripe)){
	        	   System.out.println("real.equals(ripe)" ); 
	           }




jmeter+maven直接用现有的框架:https://testerhome.com/topics/5252
代码在桌面上,进入pom.xml所在的目录执行mvn clean verify就开始自动执行了(第一次的时候会自动下载jar包要半个小时,另外要在gui的jmeter中指定的jar包也要复制到对应的目录中).
jmeter的gui中设定每个线程组跑完了在跑下一个.


www.koudaiqiche.com/yjy2
/Users/xcc/Documents/Dev/jmeter/lib/ext/JavaMD5.jar
/Users/xcc/Documents/Dev/jmeter/lib/ext/json-20160810.jar
/Users/xcc/Documents/Dev/jmeter/lib/ext/Utils.jar
正确登录:
/app2/login

app_type	2	false	true
version	2.0.3	false	true
mobile	13312345678	false	true
password	96e79218965eb72c92a549dd5a330112	false	true
cid	2d0b8348297601658576b919a1a55f7f	false	true

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

	String jsonContent=prev.getResponseDataAsString();
	JSONObject jsonObject = new JSONObject(jsonContent);
	String uid = jsonObject.get("uid").toString();
	String token = jsonObject.getString("token");
	String result = jsonObject.get("result").toString();

	
String uidExpect="3427";
String tokenLength=token.length()+"";
String resultExpect="0";



if(!result.equals(resultExpect)){
	prev.setSuccessful(false);
	}
if(!uid.equals(uidExpect)){
	prev.setSuccessful(false);	
	}else{
		vars.put("uid", uid);
		}	
if(!tokenLength.equals("32")){
	prev.setSuccessful(false);
	log.info("cds");
	}else{
		vars.put("token", token);
		}

		