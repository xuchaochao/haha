
postman:
用try catch：
try { 
tests["result=0"] = jsonData.result ===0;
}
catch (e) { }



命令行运行postman并生成报告到某个目录中（目录中要事先定义一个pp.html）。(去掉-r html的话那么就不会再命令行中生成日记了)
newman run /Users/xcc/.jenkins/workspace/postman/hehe.postman_collection.json -r html --reporter-html-export /Users/xcc/.jenkins/workspace/postman/pp.html

newman run /Users/xcc/Desktop/sh/hehe.postman_collection.json -r html --reporter-html-export /Users/xcc/Documents/xixixixi/pp.html

newman run  -r html --reporter-html-export 




1.pre-request script:
ß
对123456这个密码进行加密:
var password = CryptoJS.MD5("123456").toString();
postman.setEnvironmentVariable('password', password);
然后在params中：
password {{password}}
这样子传出的url中的密码就是加密的了

2.Tests
responseCode：
tests["Status code is 200"] = responseCode.code === 200;

responseTime：
tests["Response time is less than 200ms"] = responseTime < 200;

responseBody：
var jsonData = JSON.parse(responseBody);
tests["result"] = jsonData.result===0;
（注意，如果是result中还有一个下属（就是json一层又一层的）那么要写成jsonData.result.下属）

postman有两种变量，环境变量和全局变量。
前者针对整个环境起作用，后者只针对某个独立的collection起作用，而且两者都是可以写在tests中做参数化的。
另外的话，像简单的loop循环调用几个request也是支持的，像这种postman.setNextRequest("请求名")

manage enviroment:
右上角的眼睛按钮，点击后可以去设置enviroment变量，这个变量优先级大于global变量



设置变量，读取变量
postman.setEnvironmentVariable("key", value );

postman.setEnvironmentVariable("foo", "bar");
tests["environment var foo = bar"] = environment.foo === "bar";

postman.setGlobalVariable("foobar", "1");
tests["global var foobar = true"] = globals.foobar == true;




//111111
// postman.setGlobalVariable("password", "96e79218965eb72c92a549dd5a330112");
//123456
postman.setGlobalVariable("password", "e10adc3949ba59abbe56e057f20f883e");

// var password = CryptoJS.MD5("111111").toString();
// postman.setEnvironmentVariable('password', password);





13312345678

实际密码：111111
测试1：
先global：123456
然后enviroment：111111
结果：用的是enviroment：111111

测试2：
先enviroment：111111
然后global：123456
结果：用的是enviroment：111111

测试3：
先global：111111
然后enviroment：123456
结果：用的是enviroment：123456
----------------------------
结论，enviroment的优先级大于global，不管在代码中谁先设定

set之后又clear这个变量，那么这个变量将不起作用。

enviroment在右上角有设定a=1，但是在pre-request中没有设定，那么可以在pre-request中重新设定这个值a=2，就是说在当前这个请求里，用的是新的值a=2,但是在别的请求中还是a=1.

pre-request script中先setEnviroment，
然后点击send，
那么就会在右上角的眼睛那里加上一个enviroment的变量；
当然也可以直接在眼睛肿添加enviroment的变量。
enviroment的变量在collections中所有的不同项目中都是通用的。

var randomNumber;
for(var i=0; i<10;i++){
	randomNumber=Math.floor(Math.random()*1000);
	postman.setEnviromentVariable("random-"+i,randomNumber);
}
https://www.getpostman.com/docs/text_editor



cases2的Pre-request-script中通过postman.getEnvironmentVariable("token",“data.response.token”)
cases1的Test需要先postman.setEnvironmentVariable("token", data.response.token)


// 判断是否存在 'user_id' 值
tests["Body contains user_id"] = responseBody.has("user_id");
//进行提取并赋值成global变量:
if(tests["Body contains user_id"]){
    // 将返回信息解析成对象
    var responseData = JSON.parse(responseBody);
    tests["value_user_id"]=responseData.token.user_id
    // 设置全局变量
    postman.setGlobalVariable("user_id",tests["value_user_id"]);
}else{
    // globals["test_user_id"] 是我在 `Pre-request Script` 中预定义好的一个常量值
    postman.setGlobalVariable("user_id",globals["test_user_id"]);
}

在界面下方返回信息中的 Tests 标签中,代码内使用 tests[props_name] 括起来的属性都会显示结果: 就是pass或者fail

demo:

请求：
http://www.koudaiqiche.com/yjy2/app2/login?mobile=13312345678&password={{password}}&cid=3d66f45b2ae88e7048ea9159e2021e7a&app_type=2&version=2.0.0

返回：
{"result":0,"token":"C0232E74865126630810EE744EBD2C77","uid":3427}

Test：
tests["result"] = responseBody.has("result");
tests["token"] = responseBody.has("token");
tests["uid"] = responseBody.has("uid");

var jsonData = JSON.parse(responseBody);
tests["result-result"] = jsonData.result ==0;
tests["result-uid"] = jsonData.uid ==3427;

tests["result-token"]= jsonData.token.length==32;

http://www.koudaiqiche.com/yjy2/app2/report?content=in%E5%8E%BBPK&token=4587E2831E763800259DD0839FEF825F&uid=3427&app_type=2&version=2.0.3



1.设置环境变量--Setting an environment variable 

postman.setEnvironmentVariable("key", "value");

2.设置全局变量--Set a global variable

postman.setGlobalVariable("key", "value");

3.检查响应中包含string--Check if response body contains a string

tests["Body matches string"] = responseBody.has("string_you_want_to_search");

4.转化XML格式的响应成JSON对象---Convert XML body to a JSON object

var jsonObject = xml2Json(responseBody);

5.检查响应body中等于指定string--Check if response body is equal to a string

 tests["Body is correct"] = responseBody === "response_body_string";

6.检查JSON某字段值--Check for a JSON value

var data = JSON.parse(responseBody);

tests["Your test name"] = data.value === 100;

7.检查Content-Type是否包含在header返回（大小写不敏感）--Content-Type is present (Case-insensitive checking)

 tests["Content-Type is present"] = postman.getResponseHeader("Content-Type"); //Note: the getResponseHeader() method returns the header value, if it exists.

8.检查Content-Type是否包含在header返回（大小写敏感）--Content-Type is present (Case-sensitive)

 tests["Content-Type is present"] = responseHeaders.hasOwnProperty("Content-Type");

9.检查请求耗时时间小于200ms--Response time is less than 200ms

tests["Response time is less than 200ms"] = responseTime < 200;

10.检查Status code为200--Status code is 200

tests["Status code is 200"] = responseCode.code === 200;

11.检查Code name包含指定string--Code name contains a string

 tests["Status code name has string"] = responseCode.name.has("Created");

12.检查成功post的请求status code--Succesful POST request status code

tests["Successful POST request"] = responseCode.code === 201 || responseCode.code === 202;

13.为JSON data使用微小验证器--Use TinyValidator for JSON data

var schema = {

 "items": {

 "type": "boolean"

 }

};

var data1 = [true, false];

var data2 = [true, 123]; 

console.log(tv4.error);

tests["Valid Data1"] = tv4.validate(data1, schema);

tests["Valid Data2"] = tv4.validate(data2, schema);

Sample data files 

JSON files are composed of key/value pairs




随机用户名：
这条请求的pre-request就是在注册之前生成一个字符串作为随机用户名。

postman.setEnvironmentVariable("random_username", ("0000" + (Math.random()*Math.pow(36,4) << 0).toString(36)).slice(-4));

用例中手动失败：
tests["短信"] = false;


postman中用Javascript：
http://blog.csdn.net/qq_30909995/article/details/51932622




// 111111
// postman.setGlobalVariable("password", "96e79218965eb72c92a549dd5a330112");
//123456
// postman.setGlobalVariable("password", "e10adc3949ba59abbe56e057f20f883e");

