1.显示所有的数据库:
show databases;
2.use 某个数据源;

2.5创建表:
create table students
    （
        id int unsigned not null auto_increment primary key,
        name char(8) not null,
        sex char(4) not null,
        age tinyint unsigned not null,
        tel char(13) null default "-"
    );
unsigned表示只接受正数,不接受负数.

2.9当中文显示乱码的话可以这样创建:
create table test(
name varchar(50) not null
)default character set utf8;

3.显示该数据源下面所有的表:
show tables;

4.describe students;
查看已创建的表的详细信息



增加:
对于主键id采取强行指定大小:
insert into students values (10,"男",2,"333");
+----+-----+-----+---------+
| id | sex | age | tel     |
+----+-----+-----+---------+
|  3 | 男  |  31 | 9999999 |
|  4 | 女  | 234 | -       |
|  5 | 女  |   1 | 111     |
| 10 | 男  |   2 | 333     |
+----+-----+-----+---------+
增加:
对于主键id采取默认的自增长:
insert into students values (null,"男",99,"23423");
+----+-----+-----+---------+
| id | sex | age | tel     |
+----+-----+-----+---------+
|  3 | 男  |  31 | 9999999 |
|  4 | 女  | 234 | -       |
|  5 | 女  |   1 | 111     |
| 10 | 男  |   2 | 333     |
| 11 | 男  |  99 | 23423   |
+----+-----+-----+---------+

查询全部:
select * from students;
查询选取列中满足条件的:
select age ,sex from students where age =30;
更改id=10的age的值为1:
update students set age =1 where id =10;
删除满足某个条件的:
delete from students where id =10;
删除全部数据:
(只是删除该表的所有数据,并没有删除该表的结构,所以还是存在的)
delete from students;
完全删除表:
drop table students;

添加列:
alter table students add address char(60);(表最后的位置加)
alter table students add birthday date after age;(在某个位置加)
修改列:
alter table students change tel telphone char(13) default "-";
alter table students change name name char(16) not null;
删除列:
alter table students drop birthday;
重命名表:
alter table students rename workmates;
删除整个表:
drop table workmates;
删除整个数据库:
drop database 数据库名称;


安装完Mysql.dmg之后输入mysql没有反应,需要:
cd /usr/local/bin
ln -fs /usr/local/mysql-5.7.15-osx10.11-x86_64/bin/mysql mysql

停止和启动mysql:

登陆:
mysql -u root -p
然后输入密码:111111

第二种登陆方式:
mysql -u root -p111111
mysql -uroot -p111111
(两种方式中都要-p3366不可空格)

(出错啥的可以试试重启mysql服务(命令+图形))


其他命令
exit
quit
\q
help
\h

修改提示符:
将mysql>修改为localhost:
mysql -uroot -p3366 --prompt \h（这个是服务器的名称）

将localhost修改为mysql>
prompt mysql>

MySQL提示符:
\D完整的日期
\d当前的数据库
\h服务器的名称
\u当前的用户

更改mysql>为root@localhost test>
PROMPT \u@\h \d>

常用命令:
打印当前服务器的版本:
SELECT VERSION();

显示当前日期的时间:
SELECT NOW();

显示当前的用户:
SELECT USER();

mysql语句的规范:
关键词鱼函数名称要大写(其实小写也能执行)
数据库名称 表名称 字段名称要小些
sql语句要以分号为结尾

/*(出现->的意思是期望一个结束符号--->;)*/

创建数据库:
CREATE {DATABASES|SCHEMA} [IF NOT EXITS] db_name [DEFAULT] CHARACTER SET [=] charset_name
{}表示一定要有的内容.|表示可选择的.[]表示可选择的 
创建数据库t1:
CREATE DATABASE t1;
创建数据库:
CREATE DATABASE IF NOT EXISTS t1;
(此时会有警告信息可以通过SHOW WARNINGS来查看)

查看当前数据库的标码方式:
SHOW CREATE DATABASE t1;

设置当前数据库的编码方式:
SHOW CREATE DATABASE t2 CHARACTER SET =gbk;
ALTER DATABASE t2 CHARACTER SET =utf8;

查看当前服务器下的数据表列表:
SHOW{DATABASES|SCHEMAS}
[LIKE 'pattern'|WHERE expr]

删除数据库:
DROP {DATABASE|SCHEMAS} [IF EXISTS] db_name;
drop database t1;

**********2.1
回顾:
数据库的端口是：3306端口
数据库的超级用户为:root
创建数据库的命令: create database 数据库名
修改数据库的命令: alter database 数据库名
使用数据库的命令：use database 数据库名

**********2.2
(一)整形
在默认情况下声明的整型变量都是有符号的类型，
如果需声明无符号类型的话就需要在类型前加上unsigned。
数据类型 储存范围 字节

TINYINT 
有符号值：-128到127 ( -2的7次方 到 2的7次方-1 ) 1
无符号值： 0到255 ( 0 到 0的8次方-1 )

SMALLINT 
有符号值：-32768到32767 ( -2的15次方 到 2的15次方-1 ) 2
无符号值： 0到65535 ( 0 到 0的16次方-1 )

MEDIUMINT 
有符号值：-8388608到8388607 ( -2的23次方 到 2的23次方-1 ) 3
无符号值： 0到16777215 ( 0 到 0的24次方-1 )

INT 
有符号值：-2147483648到2147483647 ( -2的31次方 到 2的31次方-1 ) 4 
无符号值： 0到4294967295 ( 0 到 0的32次方-1 )

BIGINT 
有符号值：-9223372036854775808到9223372036854775807 ( -2的63次方 到 2的63次方-1 ) 8
无符号值： 0到18446744073709551615 ( 0 到 0的64次方-1 )

**********2.3
浮点型数据类型

float(单精度浮点)：
FLOAT[(M,D)] m是数字总位数，d是小数点后面的位数，如果md被省略，会根据硬件允许的限制来保存值

double（双精度浮点）：
DOUBLE[(M,D)]一般是float存储范围的十倍，C语言默认显示15位小数。

[(M总位数,D小数点后位数)]M>=D。单精度浮点，保留小数点后7位，C语言默认显示6位小数。

**********2.4
时间日期型(真正项目中用的不多,用的是数字比较多)
时间戳
year：占1字节，可存取两位或四位(默认四位)，1970年到2069年；
time：占3字节，-838:59:59到838:59:59；
date：占3字节，1000年1月1号到9999年12月31日；
datetime：占8字节，1000年1月1号0点到9999年12月31日23点59分59秒；
timestamp：占4字节，1970年1月1号0点到2037年之间；

**********2.5
字符型

CHAR 存储定长字符串
VARCHAR 存储变长字符串

TINYTEXT L+1个字节 L<10^8
TEXT L+1 L<10^16
MEDIUMTEXT L<10^24
LONGTEXT L<10^32

ENUM('VALUE1','VALUE2',...)枚举值用于选项 最多65535个值
SET('VALUE1','VALUE2',...)枚举值任意的排列组合 最多64个成员

**********2.6
创建数据表

一、数据表
1、数据表（或表）是数据库最重要的组成部分之一，是其他对象的基础
2、表是一个二维表，行称为【记录】，列称为【字段】

二、创建数据表
1、查看当前所有的数据库：show databases;
2、首先打开数据库（数据库要存在）：USE 数据库名称;
3、显示当前打开的是哪一个数据库：select database();
4、创建数据表：CREATE TABLE [IF NOT EXISTS] table_name(
column_name(列名称) data_type（列类型）,
.... );
举例：
CREATE TABLE tb1(
username VARCHAR(20),
userage TINYINT UNSIGNED,
salary FLOAT(8,2) UNSIGNED
);

UNSIGNED 无符号

关于表的一些语句：
创建表：create table 表名（属性 类型）；
复制表：create table 新表名 select * from 旧表名；
复制表中的几列：create table 新表名 select 列名，列名，列名 from 旧表名；
查看表中的内容：select * from 表名；
显示表：show tables；
删除表：drop table if exist 表名；
向已有的表中添加数据: insert into table 表名 values（‘值’，‘值‘）；
修改表：alter table
1：在原有的表中添加一列：alter table 表名 add column 列名 类型；
2：在原有的表的某一列添加一列：alter table 表名 add 属性 类型 after 列名；
3：给原有的列添加约束条件：alter table 元列名 change 属性 类型 约束条件；
4：删除表中的某一列：alter table 表名 drop 列名。

**********2.7
查看数据表
SHOW TABLES; //查看当前数据库中的表
SHOW TABLES FROM mysql;//查看数据库mysql下的表

**********2.8
查看数据表结构:
SHOW COLUMNS FROM tbl_name;

**********2.9
记录的插入与查找
INSERT tbl_name[(col_name,...)]VALUES(val,...)
insert tb1 values('Tom',25,786*****3.25);

忽略了字段的就要全部赋值
就是说INSERT tb1 VALUES('tom',25);是错误的
忽略字段的话可以写成下面这样:
INSERT tb1(username,salary) VALUES('John',4500.69);

记录的查找与显示:
 SELECT *FROM tb1;
(*号是字段的过滤，而不是记录的过滤)

 +----------+------+---------+
| username | age  | salary  |
+----------+------+---------+
| Tom      |   25 | 786*****3.25 |
| John     | NULL | 4500.69 |
+----------+------+---------+


**********2.10
空值与非空

NULL,字段值可以为空
NOT NULL,字段值禁止为空
CREATE TABLE tb2(username VARCHAR(20) NOTNULL)

区分：
INSERT INTO tb1 VALUES('null'),赋值为null
INSERT INTO tb1 VALUES(null),赋值为空


**********2.11
自动编号
自动编号:AUTO_INCREMENT,起始值为1，每次增量1，必须与主键组合使用

**********2.12
主键的约束
PRIMARY KEY
主键约束
每张数据表只能存在一个主键
主键保证纪录的唯一性
主键自动为NOT NULL

mysql> create table tb3(
    -> id smallint unsigned auto_increment primary key,
    -> username varchar(30) not null
    -> );
    
    将id设置为自增长后就可以单独只给username赋值了,id会自动增长

mysql> create table tb4(
    -> id smallint unsigned primary key,
    -> username varchar(20) not null
    -> );
这样写的话就不是自增长了,但是id还是不能重复的(因为设置为主键了)

主键可以单独使用,但是auto_increment必须跟着主键


**********2.13
初设唯一约束
UNIQUE KEY

1.primary key
主键约束
一个表中只能有一个
2.UNIQUE KEY
（1）唯一约束
（2）唯一约束可以保证记录的唯一性
（3）唯一约束的字段可以为空值（NULL）
（4）每张数据表可以存在多个唯一约束  
    mysql> CREATE table tb5(
    -> id smallint unsigned auto_increment primary key,
    -> username varchar(20) not null unique key,
    -> age tinyint unsigned);   
    从此username就是惟一值了 不能出现重复的
    
**********2.14
初设默认约束

DEFAULT默认值
：当插入记录时，如果没有明确为字段赋值，则自动赋予默认值。
eg.
CREATE TABLE tb6(
id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
username VARCHAR(20) NOT NULL UNIQUE KEY,
sex ENUM('1','2','3') DEFAULT '3'
);
就算不给sex赋值,系统也将默认性别为3

**********2.15
总结
使用数据库 USEdb_name
删除数据库（表）DROP DATABASE/TABLE db_name/tb_name
创建数据表 CREATE TABLE tb_name(
_name type [NULL | NOT NULL] [AUTO_INCREMENT(PRIMARY 

KEY)] 
查看数据表结构 SHOW TABLE [FROM db_name]
显示数据表结构 SHOW COLUMNS FROM tbl_name
插入记录    INSERT[INTO]tb1_name[(col_name,...)]VALUES(val,...)
记录查找    SELECT expr,...FROM tb1_name
SELECT * FROM tbl_name

NULL 字段值可以为空
NOT NULL    字段值禁止为空
AUTO_INCREMENT  自动编号，且必须与*主键*组合使用
默认情况下，起始值为1，每次的增量为1(整数)
概念解释
主键(PRIMARY KEY) 主键约束
每张数据表只能存在一个主键
主键保证记录的唯一性
主键自动为NOT NULL
不一定和AUTO_INCREMENT一起使用
UNIQUE KEY
唯一约束
唯一约束可以保证记录的唯一性
唯一约束的字段可以为空值(NULL)
每张数据表可以存在多个唯一约束

DEFAULT 默认值
当插入记录时，如果没有明确为字段赋值，则自动赋予默认值

*****3.1

*****3.2
外键约束的要求解析

FOREIGN KEY 外键约束
保持数据一致性，完整性。实现数据表的一对一或一对多关系。

外键约束的要求
1、父表(而子表参照的表我们称之为父表)和子表(具有外键列的表我们称之为子表)必须使用相同的储存引擎，而且禁止使用临时表。
2、数据表的储存引擎只能为InnoDB。
3、外键列(所谓外键列就是曾经加过FOREIGN关键词的那列)和参照列(而外键列参照的呢列我们称之为参照列)必须具有相似的数据类
型。其中数字的长度或是否有符号位必须相同;而字符的长度则可以不同。
4、外键列和参照列必须创建索引。如果参照列不存在索引的话，MySQL将自动创建索引。
(注:参照列没有索引的话MySQL将自动给你创建索引，而外键列没有索引的话MySQL则不会创建索引)

*****3.3
外键约束的参照操作

1. CASCADE:父表删除或更新将自动删除或更新子表中匹配的行
**********2. SET NULL：父表删除或更新行将设置外键列为NULL。如果使用该项，必须外键列没有指定NOT NULL
*****3.RESTRICT:拒绝对父表的删除或更新操作
4.NO ACTION 在MySQL 中 == RESTRICT    

*****3.4
表级约束与列级约束

1.表级约束与列级约束
（1）对一个数据列建立的约束，称为列级约束
（2）对多个数据列建立的约束，称为表级约束
（3）列级约束既可以在列定义时声明，也可以在列定以后声明
（4）表级约束只能在列定义后声明
**********2.主键、外键、非空、唯一、check，default都是约束条件。主键、唯一、外键、既可以作为表级约束，也可作为列级约束
而not null， default 只有列级约束

*****3.5
修改数据表-添加/删除列:

修改数据表：
添加单列：
ALTER TABLE users ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;---后面还可以跟FIRST|AFTER表示跟在哪一个字段后面
添加多列：
类似添加单列。只是不能指定位置。
删除列：
ALTER TABLE tb_name DROP col_name;

*****3.6
修改数据库-添加约束

添加外键约束：ALTER TABLE users2 ADD FOREIGN KEY(pid) REFERENCES provinces (id);
添加默认约束：ALTER TABLE users2 ALTER age SET DEFAULT 15;
删除默认约束：ALTER TABLE users2 ALTER age DROP DEFAULT;
数据表的修改操作：无非就是添加列，删除列，添加约束，删除约束。用的是ALTER，而INSERT是对数据表添加插入记录用的。

*****3.7
修改数据库-删除约束

1、删除主键约束：ALTER TABLE 表名 DROP PRIMARY KEY;
2、删除唯一约束：ALTER TABLE 表名 DROP {INDEX|KEY} 约束所在字段;
3、删除外键约束：ALTER TABLE 表名 DROP FOREIGN KEY 外键索引名字;
4、查看外键约束名称：SHOW CREATE TABLE 表名;

*****3.8
修改数据库-修改列定义和更名数据表

时间类型 year time date datetime timestamp 
创建数据库 create database x;
修改数据库 alter database x character set utf8;
查看数据库信息 show create database x;
枚举类型 enum('value1','value2','value3') 
显示当前服务器版本 select version（）；
显示当前日期时间 select now（）；
显示当前用户 select use（）；
f();函数
abs()绝对值 ceiling(x)大于x的最小整数 floor（x）小于x的最大整数 greatest(a,b,c)返回他们的最大值
没有负值 unsgined
查看表创建语句 show columns from tb1;
查看警告信息 show warnings;
自增列 auto_increament;自增利必须和主键一起使用
只有有了auto_increment 自增列 在insert时才可以不赋值
unique key空值
x enum('','','') default x为枚举类型 default默认为3

*****3.9
总结

*****4.1
回顾和概述

约束划分 
1,功能 非空约束 not null 
主键约束 primary key 
唯一约束 unique key
外键约束 foreign key 
默认约束 default 
2，个数 表级约束 foreign key unique key primary key 
列级约束 not null default 
更改
1，对字段的更改： 重命名 删除 增加 数据类型更改 约束添加 删除 更改 
2，对表的更改 ： 重命名 删除

*****4.2
插入记录INSERT

insert插入记录
INSERT [INTO] table_name [(column_name,...)] {VALUES|VALUE} ({expr|DEFAULT},...),(...),...;
1、可以给自动编号字段赋值：NULL或者DEFAULT（对于原有的有自动编号的值，可以在赋值时赋null值，或者default值）
2、有默认值的字段可以赋值：DEFAULT获取默认值
3、value里面可以使用函数或者表达式
4.插入多行数据时用逗号隔开

*****4.3插入记录INSERT SET-SELECT

第二种插入方法 insert
insert的第二种写法：
INSERT [INTO] tb1_name SET col_name={expr|DEFAULT},……
说明：与第一种方式的区别在于，此方法可以使用子查询（SubQuery）;且只能一次性插入一条记录
例：INSERT users SET username='Ben',password='456';

insert。。。。。values。。。。。
inrset。。。。。。set。。。。。
insert。。。。。select（后接查询语句，需要相同列数）。。。。

*****4.4单表更新记录UPDATE

UPDATE table_name SET col_name1={expression|DEFAULT},[col_name2=(expression|DEFAULT)],..... [WHERE where_condition]；（如果不指定WHERE则全表更新）
例：UPDATE users SET age=age+3;
UPDATE users SET age=25 WHERE age%2=0;

*****4.5单表删除记录

删除记录：<br><br>
DELETE FROM table_name [WHERE where_condition] 不指定条件，则该表全部记录被删除<br><br>
当删除某一条记录再添加一条新记录的时候，序号为原有最大序号+1<br>
例：DELETE FROM users ;<br>
DELETE FROM users WHERE id=1;

*****4.6
查询表达式解析

SELECT语句占据了操作数据表语句中很大的比例。所以非常重要
一、查找记录
1、语法：
SELECT select_expr [,select expr2...] 只查找某一个函数或表达式（字段名）
[
FROM table_references 查询表名
[WHERE where_conditon] 查询条件
[GROUP BY {col_name|position} [ASC|DESC],...] 按某个字段进行分组，相同的只显示第一个
[HAVING where_conditon] 分组时，给出显示条件
[ORDER BY {col_name|expr|position} [ASC|DESC],...] 排序
[LIMIT {[offset,]row_count|row_count OFFSET offset}] 限制返回数量
}
2、查询表达式的顺序会影响结果顺序
每个表达式表示想要的一列，必须有至少一个
多个列直接以英文逗号分隔
星号*表示所有列
3、使用tbl_name.col_name来表示列记录，这多表查询时可以区别开同名的列
4、使用[AS] alias_name为其赋予别名，别名可以用于GROUP BY、ORDER BY或HAVING子句，
例如：SELECT id AS userId,username AS uname FROM users; 这样查询出来的结果会用别名表示
SELECT 所查询的字段的出现顺序影响结果集出现顺序，字段别名也影响结果集字段别名

*****4.7
WHERR语句进行条件查询

WHERE条件：
条件表达式
对记录进行过滤, 如果没有指定WHERE子句，则显示所有记录。
在WHERE表达式中，可以使用MySQL支持的函数或运算符。

*****4.8
GROUP BY语句对查询结果进行分组

除了查询结果加where条件外 还可以对其分组：
查询结果分组：
[group by{col_name|position} [ASC|DESC],...]
select * from users group by sex;
（查询结果按sex字段的值进行分组）
select * from users group by 1;
(这里的一表示查询的第一个字段，这里查询所有，第一个字段就是id，也就是会按照字段进行分组)

*****4.9
having语句设置分组条件

分组条件：
利用GROUP BY 分组 添加分组条件 [HAVING where_condition]
条件要么为一个聚合函数，要么出现在SELECT 要查询的字段中。
[HAVING when where_condition]
SELECT sex FROM users GROUP BY 1 HAVING age > 35; //有错（原因是age没有出现在查询字段中）
SELECT sex, age FROM users GROUP BY 1 HAVING age > 35;//正确
SELECT sex FROM users GROUP BY 1 HAVING count(id) >= 2;
（这条指令，指按照sex分组，分成了两组sex=0和sex=NULL，条件id数大于2的留下显示，显然sex=0个数有8>2故留下，而sex=NULL个数为1，且count函数不计入NULL,不满足条件，故不显示。所以如果条件改成count(id)>=1,还是不会显示NULL分组。）
其实这个命令的工作流程就是先从表中查询字段，然后根据GROUP BY的条件对查询结果进行分组，再根据HAVING条件对分组进行筛选，最后留下满足所有条件的分组结果。
聚合函数永远只有一个返回结果
count是记录指定列的值的个数（NULL不计入）。

*****4.10
order by语句对查询结果排序

1、对查询结果进行排序，默认是升序，DESC为降序：[ORDER BY {col_name | expr | position} [ASC|DESC],...]
2、可以同时按多条字段进行排序，规则是先按前面的字段排，在基础上再按后面字段排。
3、如：SELECT * FROM users ORDER BY age,id DESC; 先按照age排序，如果age有重复的，重复的字段里按id排序

*****4-11
limit语句限制查询数量

限制查询结果返回数量：
[LIMIT{[offset,]row_count|row_count OFFSET offset}]
（php+mysql分页显示数据就利用了这个原理，offest为结果集起始下标，注意，下标从0开始，每页显示的数据的起始下标为（当前页数-1）*每页显示的数据数。）
（1）SELECT * FROM users LIMIT 2; // 一个数字限制查询结果数量为 2 条
（2）SELECT * FROM users LIMIT 2,3 ;从第三个开始（第一个为0），返回三条。
（3）第三种insert，数据从一个表插入到另一个表：
INSERT test SELECT username FROM users WHERE age >=30; // 字段不匹配提示
INSERT test（username） SELECT username FROM users WHERE age >=30;
这是INSERT的第三种方法，与前两种相比，这种方法是使用了子选择，这样就相当于将A表中满足条件的数据导入了B表，无需手动写了

*****4.12
小结

5-1 数据准备

查看准备数据
（1）SELECT * FROM tdb_goods\G; // 网格形式输出查询结果
（2）由于存储时使用的编码方式为utf-8格式；客户端默认的为GBK格式，所以
需要使用 SET NAMES GBK; 设置读取信息的编码格式。（存储数据的属性没有不变化）
解决乱码的问题：
1.show variables like "%char%";
类似set character_set_results=utf8;，能改的都改为uft8
2.在要创建的表后加ENGINE=InnoDB DEFAULT CHARSET=utf8;

5-2 子查询简介

子查询（Subquery）
是指出现在其他SQL语句内的SELECT子句。
例如：
SELECT * FROM t1 WHERE col1=(SELECT col2 FROM t2);
其中，select * from t1，称为Outer Query / Outer Statement SELECT col2 FROM t2,称为SubQuery

5-3 由比较运算符引发的子查询

使用比较运算符的子查询：
any ，some，all 比较运算符，对应的取值范围

（1）SELECT AVG( price ) FROM goods;//这样查出来的平均价格是一个很长的数
（2）SELECT ROUND（ AVG(price),2 ）; // 加入Round函数——AVG求平均值进行四舍五入，保留 2 位小数
（3）SELECT id,name,price FROM goods WHERE price >= (SELECT ROUND(AVG(price),2) FROM goods); // 这样的子查询方式会出错。需要在=号后面加入ANY
（4）在子查询时的关键字ANY / SOME / ALL
select goods_name,goods_price from tdb_goods where goods_price >= ANY (select goods_price from tdb_goods where goods_cate='超级本');
注意：
1. 子查询只能返回一行记录，不然会报错。
2. 子查询还可以包含子查询。
其实子查询可以把它拆开的。这样看起来就省力一些、

5-4 由[NOT] IN/EXISTS引发的子查询
第二种子查询---in not in
in 相当于=any
not in 相当于 ！=all 或者<>all ——不等于、不包含
子查询----exists not exists ——用得比较少
子查询返回任何行 exists 返回 true 反之 返回 false
-- = ANY 或 = SOME 等价于 IN
EG:SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price !=ALL (SELECT goods_price FROM tdb_goods WHERE goods_cate='超级本' ）//得到19个记录（22-3）
SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price IN (SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本')
//得到3个记录
第三种子查询.使用 [NOT] EXISTS 的子查询（较少用）


5-5 使用INSERT...SELECT插入记录

INSERT ... SET ...可以使用子查询
INSERT [INTO] tbl_name [(col_name,...)] SELECT ...将查询结果写入数据表
Eg：
INSERT INTO table_name [(column_name)] SELECT column_name2 FROM table_name2 GROUP BY column_name3;

insert tdb_goods_cates (cate_name) select good_cate from tdb_goods group by goods_cate;
将后面那个查询语句的结果插入到tdb_goods_cates表中的cate_name字段下面
效果如图

5-6 多表更新

多表更新举例：
update tdb_goods inner join tdb_goods_cates on goods_cate=cate_name 
set goods_cate=cate_id;
tdb_goods和tdb_goods_cate是要修改的表，inner join表示内连接，tdb_goods inner join tdb_goods_cates表示将两个表进行内连接，而连接需要一定的条件使虚拟的新表记录数不会比原表最大的低，这里的条件就是goods_cate=cate_name set，条件用on语句引出，tdb_goods inner join tdb_goods_cates on goods_cate=cate_name 这句话的意思就是将两个表中goods_cate=cate_name的数据进行一一对应的连接，然后对这个虚拟的新表进行修改，将goods_cate修改为该记录数对应的cate_id，又因为这个虚拟的新表其实是对原表的引用，本身是并不存在这样一个表的，所以修改后结果就体现在了原表上。

5-7 多表更新之一步到位

多表更新之一步到位：

1.创建数据表的同时将查询结果写入到数据表 （更新原表属性为新表的ID）
CREATE TABLE tdb_goods_brands (
brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
brand_name VARCHAR(40) NOT NULL
)//不加分号
SELECT brand_name FROM tdb_goods GROUP BY brand_name;

//注意两表中都叫brand_name,
2.起别名法：UPDATE tdb_goods AS g INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name 

SET g.brand_name = b.brand_id;

既然现在good_cate,good_brand 存的是其他表的id，那么表的列名（good_cate,good_brand ）也应该改成对应id

，当然类型也要改

通过ALTER TABLE语句修改数据表结构
ALTER TABLE tdb_goods 
CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,
CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;
@加外键？不一定是物理的外键，逻辑的外键也行（以上就是），当然，物理外键更能保证数据的完整性和一致性

5-8 连接的语法结构

1.连接
MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作。
连接的语法结构：
table reference A
{[INNER|CROSS] JOIN | {LEFT|RIGHT} [OUTER] JOIN}
table_reference B
ON condition_expr
2.数据表参照
table_reference
tbl_name [[AS] alias] | table_subquery [AS] alias
数据表可以使用tbl_name AS alias_name 或 tbl_name alias_name赋予别名。
table_subquery可以作为子查询使用在FROM子句中，这样的子查询必须为其赋予别名。

5-9 内连接INNER JOIN

连接类型:
在MySql中，JOIN,CROSS JOIN和 INNER JOIN是等价的。
LEFT[OUTER] JOIN,左外连接
RIGHT[OUTER]JOIN,右外连接
连接条件：
使用ON关键字来设定连接条件。也可以使用WHERE来代替。
通常用ON关键字来设定连接条件。使用WHERE关键字进行结果集记录的过滤。

内连接：仅显示两张表中符合条件的记录。

5-10 外连接OUTER JOIN

外连接分为左外连接和右外连接：左外连接显示左表全部记录以及与右表符合连接条件的记录。
eg：SELECT goods_id,goods_name,cate_name FROM tdb_goods//前两个来自左表，最后一个来自右表
LEFT JOIN//打印机的goods_id, goods_name 出现（因为左表的全部）打印机cate_name=null(与和右表的符合条件的部分， 因为打印机的商品分类是12，但分类表中并不存在这条记录) 
tdb_goods_cate ON tdb_goods.cate_id = tdb_goods_cate.cate_id;

右外连接
eg：SELECT goods_id,goods_name,cate_name FROM tdb_goods//前两个来自左表，最后一个来自右表
RIGHT JOIN// ；路由器，交换机，网卡的 机cate_name有值（因为右表的全部 ）； 打印机不见了：因为左表并不存在这条记录； 路由器，交换机，网卡的goods_id, goods_name =null(与和左表的符合条件的部分）
一般使用的内连接多：INNER JOIN ... ON...;

5-11 多表连接

多表连接：SELECT goods_id,goods_name,cate_name,brand_name,goods_price 
FROM tdb_goods AS g 
INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id
->INNER JOIN tdb_brands AS b ON g.brand_id = b.brand_id\G;

多表的连接跟两张表的连接一样，是外键的逆操作

外键：将一张逻辑表分成多张物理表，好处是节省存储空间、提高查询效率、实现表的可扩展性，缺点是，操作可能

比较烦人，增删改查都需要考虑更多的情况

连接：将多张物理表拼接程一张逻辑表，主要就是为了获取更完整更多的数据信息，是外键操作的逆操作

5-12 关于连接的几点说明

//表连接
update tdb_goods as g inner join tdb_goods_brands as b on g.brand_name=b.brand_name set g.brand_name=b.brand_id;
//改变表字段的类型
mysql> alter table tdb_goods
-> change goods_cate cate_id smallint unsigned not null,
-> change brand_name brand_id smallint unsigned not null;
//三表连接
mysql> select goods_id,goods_name,cate_name,brand_name,goods_price from tdb_goods as g
-> inner join tdb_goods_cates as c on g.cate_id=c.cate_id
-> inner join tdb_goods_brands as b on g.brand_id=b.brand_id\G;

5-13 无限级分类表设计

第一：select s.type_id,s.type_name,p.type_name from tdb_goods_types as s left join tdb_goods_types as p
on s.parent_id=p.type_id 
第二：select p.type_id,p.type_name,count(s.type_name) from tdb_goods_types as p left join tdb_goods_types as s
on s.parent_id=p.type_id group by p.type_name order by p.type_id
把原表想象成两个表s（子表),p（父表）然后两个表进行连接：

第一种显示父类，把s表中最后一列的id替换成p表name,连接的条件是子类s的最后一列等于父类p的id，获得的结果是子类id+子类类型+父类类型（s+s+p）；

第二种显示子类，连接条件一样，可以参考第一种结果出现的表，只不过显示结果是先父类id+父类类型+子类类型（p+p+s）。

使用左连接可以把没有的为null显示。


5-14 多表删除

-- INSERT ... SELECT实现复制<br>
<br>
INSERT tdb_goods(goods_name,cate_id,brand_id) SELECT goods_name,cate_id,brand_id FROM tdb_goods WHERE goods_id IN (19,20);<br>
<br>
-- 查找重复记录<br>,——分组后记录条数超过两个以上就是重复的
<br>
SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2;<br>
<br>
-- 删除重复记录<br>
<br>
DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) >= 2 ) AS t2 ON t1.goods_name = t2.goods_name WHERE t1.goods_id > t2.goods_id;


6-1 回顾和概述

子查询和连接总结
子查询:
出现在sq语句中的select子句，而子查询必须要出现在小括号()内，他的外层可以是select语句，insert语句，update语句，delete语句，而且在子查询中可以包含多个关键词:group by ，order by ，limit以及相关函数。。。引发子查询的情况有比较运算符 ，in(NOT)in运算符，exist(NOT EXIST)引发的子查询

连接:
连接分为外连接和内连接，内连接主要显示的是左表和右表当中都符合连接条件的记录。外链接有分为左外连接和右外连接，左外连接显示的是左表中的全部记录和右表符合条件的记录，右外连接和左外连接相反，mq中的select，多表更新和删除都可以用到。。内连接，左，右连接。。
create语句中的select ，insert select 语句


6-2 字符函数

各种函数SELECT CONCAT(FIRSTNAME,LASTNAME) AS FULLNAME FROM TB1;
/*# SELECT CONCAT_WS('|',''2','2','3','4');#*/
以"|"为分隔符

SELECT FORMAT(23.2234，2);保留两位小数
SELECT LEFT('VNJSNVJS',2);得到前两位
字符函数：--------将字符连接在一起

SELECT CONCAT('imooc','MySql'); --将两个字符连接在一起
SELECT CONCAT('imooc','-','MySql'); --两个字符连接在一起中间加个分隔符
SELECT CONCAT(first_name,last_name)AS fullname FROM test;---将某个表中的两个字段里的内容拼到一起

SELECT CONCAT_WS('|','A','B','C');---用指定分隔符进行字符连接。分隔符放在最前面

SELECT FORMAT(12560.75，2);--数字格式化。四舍五入保留2位小数

SELECT LOWER('MYSQL');---转换成小写字母

SELECT UPPER('mysql');--转换成大写字母

SELECT LEFT('MySql',2);---获取左侧两个字符串

SELECT RIGHT('MySql',2);--获取右边两个字符串

SELECT SUBSTRING('MySql',1,2);--注意MySql中字符串下表从1开始。和程序里的不一样、所以结果为My

如果只写明从第几位开始截取而没有说截到第几位。那就会一直截到结尾。
用-1可以表示截取最后一位

trim()删除前导和后续的空格

6-3 数值运算符和函数

数值运算符
CEIL()--进一取正，也就是向上取整
FLOOR()--舍一取正，也就是向下取整
DIV--整数除法，其实和普通除法向下取整一样
MOD --取余，等价于%
POWER() --幂运算
ROUND() --取余（四舍五入）
TRUNCATE() --截断（不四舍五入）
例：
CEIL(3.01) ==>4 /*有n.xx 都是n+1 进一取整 向上取整
FLOOR(3.99) ==>3 /*取n.xx 都是n 舍一取整 向下取整
SELECT 3 DIV 4 ==> 0 /*整数除法
SELECT 3/4 ==>0.75 /*除法
SELECT 21 MOD 2 ==>1 /*取余数(取模)，整数、小数都可以
SELECT 21 % 2 ==>1 /*取余数(取模)，整数、小数都可以
SELECT POWER(3,4) ==>81 /*3的4次方 幂运算
SELECT ROUND(3.1415926,3) ==>3.142 /*四舍五入，截到小数后3位
SELECT TRUNCATE(123.89,1) ==>123.8 /*截取小数点后的位置
SELECT TRUNCATE(123.89,0) ==>123 /*截取小数点后的位置,0位为整数部分
SELECT TRUNCATE(123.89,-1) ==>120 /*截取-1,从个位起去掉后面的数值替换为0
*/
6-4 比较运算符和函数

比较运算符和函数：（给出的都是闭合的区间）
（1）想在first_name这个字段中查找哪个字段值为NULL，可以用IS [NOT] NULL,这比较运算符，如：SELECT * FROM test WHERE first_name IS NULL;
（2）[NOT] IN 的具体用法，SELECT 16 IN(1，2，16，68),返回的是true就是1.
（3）[NOT] BETWEEN....AND....具体用法：SELECT 6 BETWEEN 0 AND 29，返回的是true也就是1。也可以是字符串。

6-5 日期时间函数

NOW() /*当前时间 含日期（xxxx-xx-xx）和时间(xx:xx:xx)*/
CURDATE() /* current当前日期 只有日期*/
CURTIME() /*当前时间 值有时间*/

DATE_ADD() /*时间增减或减少*/
SELECT DATE_ADD('2014-3-12',INTERVAL 365 DAY); ==>2015-3-12 /*在原有给定的时间上增加365天 
INTERVAL增加可以增加负值 单位 year ,month,week,day
SELECT DATE_ADD('2014-3-12',INTERVAL 1 YEAR);//*/

SELECT DATEDIFF('2014-1-1','2015-1-1') ==> -365 /*时间差值计算 单位为日 前面时间减去后面时间
SELECT DATE_FORMAT('2014-3-2','%m/%d/%y'); ==> 03/02/2014 /*日期格式转换
SELECT DATE_FORMAT(NOW（）,'%m/%d/%y');
//注意大小写的区别，%M，%D大写对应英语，%m，%d小写对应数字，%Y对应4位年份，%y对应2位年份
*/
6-6 信息函数

（1）CONNECTION_ID(); // 连接ID
mysql> SELECT CONNECTION_ID();
（2）SELECT DATABASE(); // 当前数据库
（3）LAST_INSERT_ID(); // 最后句插入记录的 ID 号，如果是一次insert中插入的是多条记录，得到的是多条中的第一条（而不是最后一条！）
（4)USER(); // 当前用户
SELECT USER();
（5）VERSION(); // 版本的信息

6-7 聚合函数

聚合函数(都是大写)//一般用在数据表中<br>
AVG()求平均值 //SELECT AVG(good_pric) AS avg_price FROM tb_name.<br>
COUNT()计数 //SELECT COUNT(good_id) FROM....//统计id<br>
MAX()最大值 //SELECT MAX(good_price ) FROM..//返回good_price字段下记录最大值<br>
MIN1()最小值

6-8 加密函数

加密函数：
MD5()用于对web页面做准备
例如：SELECT MD5('admin');
PASSWORD();主要是对自己密码的计算
例如：SELECT PASSWORD('admin');
PASSWORD();基本上只有一个用途。就是修改客户端自己密码的时候用
SET PASSWORD=PASSWORD('zhangsan');这样登陆的时候就要用zhangsan才能登陆了

7-1 回顾和概述

mysql内置函数包括：<br>
字符函数<br>
数值函数<br>
日期时间函数<br>
加密函数

7-2 自定义函数简介

在MySQL中函数分为内置函数和自定义函数
（1）用户自定义函数其实是一种对MySQL扩展的途径，其用法与内置函数相同。

自定义函数的两个必备条件：
1.参数 （可以为任意类型）
2.返回值 （可以为任意类型）

创建自定义函数：
CREATE FUNCTION function_name
RETURNS
{STRING|INTEGER|REAL|DECIMAL}
routine_body
关于函数体见下图片：

7-3 创建不带参数的自定义函数

创建一个不带参数的自定义函数：（知识点补充一下：数据库是存储在服务器端的，而不是个人工作站中，SET NAMES gbk;是改变客户端就是编程人员看到的编码方式，不影响远方服务器端的编码，服务器端的编码方式依然是UTF-8）<br>
1.例子：把内置的时间函数混合后做成一个不带参数的自定义函数，RETURNS后面跟的是返回值类型，RETURN后面跟的是返回值。
具体实现：CREATE FUNCTION myTime()
RETURNS VARCHAR(30)
RETURN DATE_FORMAT(NOW(),'%Y年%m月%d日 %H点%i分%s秒');

7-4 创建带有参数的自定义函数

创建自定义函数：CREATE FUNCTION fun_name(参数1，参数2，。。。)
RETURNS +返回值类型
RETURN +函数体；

7-5 创建具有复合结构函数体的自定义函数

修改命令结束分隔符 DELIMITER $;
在函数定义的时候 函数以分隔符结束 所以要修改命令分隔符 不能一样 返回到命令模式时可以修改过来 函数体有多个语句要用begin end 抱起来;
CREATE FUNCTION F1 ..
DROP FUNCTON F2;

8-1 课程回顾
1.函数需要具备两个条件：
参数:可以有0个或多个
返回值：只能有一个返回值
2.如果函数体有多个SQL语句，要用复合结构，即BEGIN ...END。
3.delimiter -->> DELIMITER 是“n.定界符”的意思

8-2 存储过程简介





///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
////////////////////////////MySQL必知必会//////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

vendors:
供应商

products:
产品目录
包含产品目录，每行一个产品。每个产品有唯一的ID
（ prod_id列），通过vend_id（供应商的唯一ID）关联到它的供应商。

customer:
顾客信息

orders:
顾客订单

orderitems:
每个订单中的实际物品

productnotes:
与特定产品有关的注释。并非所有产品都有相
关的注释，而有的产品可能有许多相关的注释。


为了连接到MySQL，需要以下信息：
? 主机名（计算机名）——如果连接到本地MySQL服务器， 为localhost；
? 端口（如果使用默认端口3306之外的端口）；
   一个合法的用户名；
? 用户口令（如果需要）

必须先使用USE打开数据库，才能读取其中的数据

SHOW DATABASES;返回可用数据库的一个列表。

SHOW TABLES;返回当前选择的数据库内可用表的列表。

SHOW COLUMNS FROM 表名;
(也可用DESCRIBE biaoming )
DESCRIBE作为SHOW COLUMNS FROM的一种快捷方式

SHOW STATUS，用于显示广泛的服务器状态信息；

SHOW CREATE DATABASE和SHOW CREATE TABLE，分别用来显示创建特定数据库或表的MySQL语句；
? 
SHOW GRANTS，用来显示授予用户（所有用户或特定用户）的安全权限；

SHOW ERRORS和SHOW WARNINGS， 用来显示服务器错误或警告消息。







